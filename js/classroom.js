// Generated by CoffeeScript 1.10.0
(function() {
  this.create_group = function() {
    $("#create_group_form input, #create_group_form .btn").attr("disabled", "disabled");
    return api_call("POST", "/api/group/create", {
      "groupname": $("#group_name").val()
    }).done(function(result) {
      if (result["success"] === 1) {
        return display_message("#create_group_msg", "success", result.message, function() {
          return location.reload(true);
        });
      } else {
        $("#create_group_form input, #create_group_form .btn").removeAttr("disabled");
        return display_message("#create_group_msg", "danger", result.message);
      }
    });
  };

  this.remove_group = function(gid) {
    if (confirm("Are you sure you want to remove this class? This action is irreversible.")) {
      return api_call("POST", "/api/group/delete", {
        "gid": gid
      }).done(function(result) {
        if (result["success"] === 1) {
          return display_message("#msg_" + gid, "success", result.message, function() {
            return location.reload(true);
          });
        }
      });
    }
  };

  this.add_team = function(gid, jc_box) {
    $(".add_team_form input").attr("disabled", "disabled");
    return api_call("POST", "/api/group/add_team", {
      "gid": gid,
      "join_code": $(jc_box).val()
    }).done(function(result) {
      if (result["success"] === 1) {
        return display_message("#msg_" + gid, "success", result.message, function() {
          return location.reload(true);
        });
      } else {
        $(".add_team_form input").removeAttr("disabled");
        return display_message("#msg_" + gid, "danger", result.message);
      }
    });
  };

  this.remove_team = function(gid, tid) {
    if (confirm("Are you sure you want to remove this team? This action is irreversible.")) {
      return api_call("POST", "/api/group/remove_team", {
        "gid": gid,
        "tid": tid
      }).done(function(result) {
        if (result["success"] === 1) {
          ($("#grouppanel" + gid + tid)).slideUp("fast");
          return display_message("#msg_" + gid, "success", result.message, function() {
            return location.reload(true);
          });
        }
      });
    }
  };

  this.load_group_info = function(show_first_tab, callback) {
    return api_call("GET", "/api/group/list", {}).done(function(result) {
      var group, i, j, len, len1, ref, ref1, team;
      if (result["success"] === 1) {
        window.groupListCache = result["data"];
        window.teamCache = {};
        ref = result["data"];
        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          ref1 = group["members"];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            team = ref1[j];
            window.teamCache[team["tid"]] = team;
          }
        }
        return load_group_management(result["data"], show_first_tab, callback);
      }
    });
  };

  this.load_graph = function(gid, tid) {
    return google.load("visualization", "1", {
      packages: ["corechart"],
      callback: function() {
        var category, cdata, chart, colors, data, gdata, i, j, k, l, len, len1, len2, len3, member, members, options, problem, ref, ref1, ref2, team, uids;
        team = window.teamCache[tid];
        data = [];
        members = ["Members"];
        uids = [];
        ref = Object.keys(team["members"]);
        for (i = 0, len = ref.length; i < len; i++) {
          member = ref[i];
          members.push(team["members"][member]["name"]);
          uids.push(team["members"][member]["uid"]);
        }
        members.push("Unsolved");
        data.push(members);
        ref1 = Object.keys(team["category_breakdown"]);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          category = ref1[j];
          cdata = [category];
          for (k = 0, len2 = uids.length; k < len2; k++) {
            member = uids[k];
            cdata.push(0);
          }
          cdata.push(0);
          ref2 = team["category_breakdown"][category];
          for (l = 0, len3 = ref2.length; l < len3; l++) {
            problem = ref2[l];
            if (problem["solved"] === true) {
              cdata[(uids.indexOf(problem["by"])) + 1] += 1;
            } else {
              cdata[cdata.length - 1] += 1;
            }
          }
          data.push(cdata);
        }
        console.log(data);
        gdata = google.visualization.arrayToDataTable(data);
        colors = ["#2FA4F0", "#B9F9D0", "#2E5CC0", "#8BADE0", "#E6BF70", "#CECFF0", "#30A0B0", "#0c6aa6"];
        colors[members.length - 2] = "#000000";
        options = {
          title: "Problem Overview for " + team["teamname"],
          height: 400,
          legend: {
            position: 'top',
            maxLines: 3
          },
          isStacked: true,
          bar: {
            groupWidth: '75%'
          },
          colors: colors,
          series: {}
        };
        options.series[members.length - 2] = {
          color: "black",
          visibleInLegend: false
        };
        chart = new google.visualization.ColumnChart(document.getElementById("graph" + gid + team["tid"]));
        return chart.draw(gdata, options);
      }
    });
  };

  this.load_group_management = function(groups, show_first_tab, callback) {
    var render_class_list, render_team;
    render_class_list = _.template($("#template_class_list").remove().text());
    render_team = _.template($("#template_team").remove().text());
    if (groups.length > 0) {
      groups[0].active = true;
    }
    $("#class_container").html(render_class_list({
      groups: groups,
      render_team: render_team
    }));
    if (callback) {
      return callback();
    }
  };

  $(function() {
    api_call("GET", "/api/user/info", {}).done(function(result) {
      if (result.success === 0 || (result.data && result.data.logged_in !== true)) {
        return location.href = "/login";
      } else {
        if (!(result.data.type === 2)) {
          return location.href = "/account";
        }
      }
    });
    load_group_info(true);
    return $('#group_tabs a').click(function(e) {
      e.preventDefault();
      return $(this).tab("show");
    });
  });

}).call(this);
